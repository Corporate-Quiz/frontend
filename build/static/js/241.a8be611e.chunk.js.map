{"version":3,"file":"static/js/241.a8be611e.chunk.js","mappings":"4QAKMA,EAAaC,EAAAA,QAAOC,GAAEC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oRAEV,SAAAC,GAAQ,OAAAA,EAALC,KAAiB,IACf,SAAAC,GAAe,OAAAA,EAAZC,aAAmC,UAAY,0BAA0B,IAY7FC,EAAMR,EAAAA,QAAOS,GAAEC,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,iJAkBrB,EAR0E,SAAHQ,GAAA,IAAMC,EAAcD,EAAdC,eAAgBC,EAAWF,EAAXE,YAAW,OACtGC,EAAAA,EAAAA,KAACN,EAAG,CAAAO,SACDF,EAAYG,KAAI,SAACC,EAAIC,GAAK,OACzBJ,EAAAA,EAAAA,KAACf,EAAU,CAACM,MAAO,IAAMQ,EAAYM,OAAQZ,aAAcW,KAASN,GAAqBK,EAAGG,GAAM,KAEhG,E,UCmER,EAxF+B,WAC7B,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACRE,GAAsCC,EAAAA,EAAAA,UAAS,CAAE,EAAG,KAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlDV,EAAcY,EAAA,GAAEE,EAAWF,EAAA,GAClCG,GAAsCJ,EAAAA,EAAAA,UAAS,GAAEK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAA1CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,GAAmCC,EAAAA,EAAAA,IAAgBZ,GAA3Ca,EAAIF,EAAJE,KAAWF,EAALG,MAAgBH,EAATI,WACJC,EAAAA,EAAAA,KACjBC,QAAQC,IAAI1B,GASZ,OACEqB,EAAMM,UAAUpB,OAAS,GAErBqB,EAAAA,EAAAA,MAACC,EAAAA,GAAG,CAACC,MAAO,CAAEC,QAAS,GAAI5B,SAAA,EACzBD,EAAAA,EAAAA,KAAC8B,EAAAA,GAAK,CAACC,OAAO,IAAG9B,SAAM,OAAJkB,QAAI,IAAJA,OAAI,EAAJA,EAAMa,QACzBhC,EAAAA,EAAAA,KAACiC,EAAW,CAAClC,YAAaoB,EAAMM,UAAW3B,eAAgBA,KAC3DE,EAAAA,EAAAA,KAACkC,EAAAA,GAAQ,CAACH,OAAO,IAAIH,MAAO,CAAEO,UAAW,QAASlC,SAAA,wCAAAmC,OAAYrB,EAAc,EAAC,KAAAqB,OAAIjB,EAAMkB,oBACvFrC,EAAAA,EAAAA,KAAC8B,EAAAA,GAAK,CAACF,MAAO,CAAEO,UAAW,QAASlC,SAAM,OAAJkB,QAAI,IAAJA,OAAI,EAAJA,EAAMM,UAAUV,GAAauB,QACnEZ,EAAAA,EAAAA,MAACC,EAAAA,GAAG,CACFC,MAAO,CACLW,OAAQ,aACRV,QAAS,EACTW,QAAS,OACTC,cAAe,MACfC,IAAK,OACLC,eAAgB,QAChBC,WAAY,YACZ3C,SAAA,EACFyB,EAAAA,EAAAA,MAACC,EAAAA,GAAG,CAACC,MAAO,CAAEC,QAAS,GAAI5B,SAAA,EACzBD,EAAAA,EAAAA,KAAA,MACE4B,MAAO,CACLiB,UAAW,OACXhB,QAAS,IACTU,OAAQ,IACRhD,MAAO,QACPiD,QAAS,OACTM,oBAAqB,iBACrBJ,IAAK,OACLK,aAAc,QACdH,WAAY,QACZD,eAAgB,QAChBK,aAAc,SACd/C,SACG,OAAJkB,QAAI,IAAJA,OAAI,EAAJA,EAAMM,UAAUV,GAAakC,QAAQ/C,KAAI,SAACC,EAAIC,GAAK,OAClDJ,EAAAA,EAAAA,KAAA,MAEE4B,MAAO,CACLsB,OAAQ,UACRL,UAAW,OACXtD,MAAO,QACP4D,OAAQ,OACRC,OAAQ,oBACRC,aAAc,MACdb,QAAS,OACTC,cAAe,SACfE,eAAgB,SAChBC,WAAY,UACZ3C,SACDE,EAAGmC,MAbCnC,EAAGG,GAcL,OAKTN,EAAAA,EAAAA,KAACsD,EAAAA,EAAY,CAACC,QA9DN,WACdxC,EAAc,KAAU,OAAJI,QAAI,IAAJA,OAAI,EAAJA,EAAMkB,mBAC9BrB,EAAeD,EAAc,GAC7BH,GAAW4C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI1D,GAAc,IAAA2D,EAAAA,EAAAA,GAAA,GAAG1C,EAAc,EAAI,OACtD,EA0DgDa,MAAO,CAAErC,MAAO,SAAUU,SAAC,6CAEjED,EAAAA,EAAAA,KAAA,OACE4B,MAAO,CACLC,QAAS,EACTtC,MAAO,QACP4D,OAAQ,QACRE,aAAc,MACdK,UAAW,SAEbC,IAAS,OAAJxC,QAAI,IAAJA,OAAI,EAAJA,EAAMM,UAAUV,GAAa6C,MAClCC,IAAI,oCAIV7D,EAAAA,EAAAA,KAAC8D,EAAAA,GAAQ,CAACC,GAAG,YAErB,C","sources":["ui-lib/ProgressBar.tsx","pages/QuizQuestion.tsx"],"sourcesContent":["/* eslint-disable max-len */\r\nimport React, { FC } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Question } from '../types/types';\r\n\r\nconst BarElement = styled.li<{ isCurrentBar: boolean, width: number }>`\r\n    \r\n    flex-basis: ${({ width }) => width}%;\r\n    background-color:${({ isCurrentBar }) => (isCurrentBar ? '#3F8AE0' : 'rgba(63, 138, 224, 0.15)')};\r\n    border-right: 3px solid #3F8AE0;\r\n    &:last-of-type {\r\n        border-right: none;\r\n        border-radius: 0px 8px 8px 0px;\r\n    }\r\n    &:first-of-type {\r\n        border-radius: 8px 0px 0px 8px;\r\n\r\n    }\r\n`;\r\n\r\nconst Bar = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    max-width: 914px;\r\n    width: 100%;\r\n    display: flex;\r\n    height: 8px;\r\n`;\r\n\r\nconst ProgressBar: FC<{ progressObject: any, questionArr: Question[] }> = ({ progressObject, questionArr }) => (\r\n  <Bar>\r\n    {questionArr.map((el, index) => (\r\n      <BarElement width={100 / questionArr.length} isCurrentBar={index in progressObject} key={el.id} />\r\n    ))}\r\n  </Bar>\r\n);\r\n\r\nexport default ProgressBar;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Div,\r\n  Title,\r\n  Headline,\r\n} from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport { Navigate, useParams } from 'react-router';\r\nimport StyledButton from '../ui-lib/StyledButton';\r\nimport { useGetQuizQuery } from '../api/apiv2';\r\nimport ProgressBar from '../ui-lib/ProgressBar';\r\nimport { useDispatch } from '../store/store.types';\r\nimport { setLoaderState } from '../store/allSlice/allSlice';\r\n\r\nconst QuizQuestion: React.FC = () => {\r\n  const { id } = useParams();\r\n  const [progressObject, setProgress] = useState({ 0: '' });\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const { data, error, isLoading } = useGetQuizQuery(id);\r\n  const dispatch = useDispatch();\r\n  console.log(progressObject);\r\n  const setNextPage = () => {\r\n    if (currentPage + 1 === data?.question_amount) { return; }\r\n    setCurrentPage(currentPage + 1);\r\n    setProgress({ ...progressObject, [currentPage + 1]: ' ' });\r\n  };\r\n\r\n  /* if (isLoading) { dispatch(setLoaderState(true)); } */\r\n\r\n  return (\r\n    data!.questions.length > 0\r\n      ? (\r\n        <Div style={{ padding: 0 }}>\r\n          <Title weight='3'>{data?.name}</Title>\r\n          <ProgressBar questionArr={data!.questions} progressObject={progressObject} />\r\n          <Headline weight='3' style={{ marginTop: '20px' }}>{`Вопрос ${currentPage + 1}/${data!.question_amount}`}</Headline>\r\n          <Title style={{ marginTop: '20px' }}>{data?.questions[currentPage].text}</Title>\r\n          <Div\r\n            style={{\r\n              margin: '32px 0 0 0',\r\n              padding: 0,\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n              gap: '32px',\r\n              justifyContent: 'start',\r\n              alignItems: 'flex-end',\r\n            }}>\r\n            <Div style={{ padding: 0 }}>\r\n              <ul\r\n                style={{\r\n                  listStyle: 'none',\r\n                  padding: '0',\r\n                  margin: '0',\r\n                  width: '464px',\r\n                  display: 'grid',\r\n                  gridTemplateColumns: 'repeat(2, 1fr)',\r\n                  gap: '20px',\r\n                  justifyItems: 'start',\r\n                  alignItems: 'start',\r\n                  justifyContent: 'start',\r\n                  alignContent: 'start',\r\n                }}>\r\n                {data?.questions[currentPage].answers.map((el, index) => (\r\n                  <li\r\n                    key={el.id}\r\n                    style={{\r\n                      cursor: 'pointer',\r\n                      listStyle: 'none',\r\n                      width: '222px',\r\n                      height: '52px',\r\n                      border: '1px solid #DCE1E6',\r\n                      borderRadius: '4px',\r\n                      display: 'flex',\r\n                      flexDirection: 'column',\r\n                      justifyContent: 'center',\r\n                      alignItems: 'center',\r\n                    }}>\r\n                    {el.text}\r\n                  </li>\r\n\r\n                ))}\r\n\r\n              </ul>\r\n              <StyledButton onClick={setNextPage} style={{ width: '167px' }}>Дальше</StyledButton>\r\n            </Div>\r\n            <img\r\n              style={{\r\n                padding: 0,\r\n                width: '418px',\r\n                height: '230px',\r\n                borderRadius: '8px',\r\n                objectFit: 'cover',\r\n              }}\r\n              src={data?.questions[currentPage].image}\r\n              alt='Квиз' />\r\n          </Div>\r\n        </Div>\r\n      )\r\n      : <Navigate to='/quizzes' />\r\n  );\r\n};\r\n\r\nexport default QuizQuestion;\r\n"],"names":["BarElement","styled","li","_templateObject","_taggedTemplateLiteral","_ref","width","_ref2","isCurrentBar","Bar","ul","_templateObject2","_ref3","progressObject","questionArr","_jsx","children","map","el","index","length","id","useParams","_useState","useState","_useState2","_slicedToArray","setProgress","_useState3","_useState4","currentPage","setCurrentPage","_useGetQuizQuery","useGetQuizQuery","data","error","isLoading","useDispatch","console","log","questions","_jsxs","Div","style","padding","Title","weight","name","ProgressBar","Headline","marginTop","concat","question_amount","text","margin","display","flexDirection","gap","justifyContent","alignItems","listStyle","gridTemplateColumns","justifyItems","alignContent","answers","cursor","height","border","borderRadius","StyledButton","onClick","_objectSpread","_defineProperty","objectFit","src","image","alt","Navigate","to"],"sourceRoot":""}